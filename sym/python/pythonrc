# vim: ft=python
#
# Change the behaviour of the command-line interpreter. Amongst other things this script
# sets the python_history file to another location (in XDG_DATA_HOME)

import os
import sys


def enablecompleter():
    '''Enable readline configuration on interactive prompts, by registering
    a sys.__interactivehook__.

    If the readline module can be imported, the hook will set the Tab key
    as completion key and register $XDG_DATA_HOME/python/history as history
    file.

    This function is taken from the Python source code site.enablecompleter()
    with the desired modifications to allow a cleaner home directory.
    '''
    def register_readline():
        import atexit
        try:
            import readline
            import rlcompleter  # rlcompleter allows Python-specific completion
        except ImportError:
            return

        # Reading the initialization (config) file may not be enough to set a
        # completion key, so we set one first and then read the file.
        readline_doc = getattr(readline, '__doc__', '')
        if readline_doc is not None and 'libedit' in readline_doc:
            readline.parse_and_bind('bind ^I rl_complete')
        else:
            readline.parse_and_bind('tab: complete')

        try:
            readline.read_init_file()
        except OSError:
	    # An OSError here could have many causes, but the most likely one
            # is that there's no .inputrc file (or .editrc file in the case of
            # Mac OS X + libedit) in the expected location.  In that case, we
            # want to ignore the exception.
            pass

        if readline.get_current_history_length() == 0:
 	    # If no history was loaded, default to $XDG_DATA_HOME/python/history.
 	    # The guard is necessary to avoid doubling history size at
 	    # each interpreter exit when readline was already configured
 	    # through a PYTHONSTARTUP hook, see:
 	    # http://bugs.python.org/issue5845#msg198636 
            history = os.path.join(os.getenv('XDG_DATA_HOME', '~/.local/share'),
                                   'python/history')
            try:
                readline.read_history_file(history)
            except OSError:
                pass

            def write_history():
                try:
                    readline.write_history_file(history)
                except (FileNotFoundError, PermissionError):
                    # Data directory does not exist or is not writeable
                    pass

            atexit.register(write_history)

    sys.__interactivehook__ = register_readline


# Enable completer for interactive sessions.
enablecompleter()
