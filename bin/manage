#!/usr/bin/env bash
#
# Dotfiles and Tool Manager - Script to manage and rice my systems.

set -eu -o pipefail

export DTMGR_HOME="$(readlink -f "$(dirname "${BASH_SOURCE[@]}")/..")"
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"

# ------------------------------------------------------------------------------
#   LOG FUNCTIONS
# ------------------------------------------------------------------------------

manage_log() {
    local COLOR

    COLOR="$1";shift
    printf "${COLOR}MANAGE | $TARGET |$(tput sgr0 2>/dev/null) $*"
}

log_info() {
    manage_log "$(tput setaf 4 2>/dev/null)" "$@" "\n"
}

log_warn() {
    manage_log "$(tput setaf 3 2>/dev/null)" "$@" "\n"
}

log_error() {
    manage_log "$(tput setaf 1 2>/dev/null)" "$@" "\n" >&2
}

log_fatal() {
    log_error "$@"
    exit 1
}

log_temp_file() {
    local logfile="/tmp/${1%.*}$(date +"%Y%m%d-%H-%M-%S").log"
    cp "$1" "$logfile" 2>/dev/null
    echo "$logfile"
}

# ------------------------------------------------------------------------------
#   MISC FUNCTIONS
# ------------------------------------------------------------------------------

detect_distribution() {
    [[ ! -f /etc/os-release ]] && \
        TARGET="ERROR" log_fatal "cannot read /etc/os-release. set up distro with DISTRI" \
            "environment variable."

    os_release_id="$(cat /etc/os-release | grep -oE '^ID=([A-Za-z]+)$' | cut -d'=' -f2)"
    case "$os_release_id" in
        *arch*)
            echo "arch"
            ;;
        *debian*)
            echo "debian"
            ;;
        *ubuntu*)
            echo "ubuntu"
            ;;
        *parrot*)
            echo "parrot"
            ;;
        *)
            TARGET="ERROR" log_fatal "unknown distro, set it up manually with DISTRI" \
                "environment variable"
    esac
}

is_tool_installed() {
    git status --ignored "$1" | egrep -q 'Untracked|Ignored'
}

verify_target() {
    if [[ -z "$TARGET" ]]; then
        TARGET="$COMMAND" log_error "must provide, at least, one environment to $COMMAND"
        return 1
    fi

    if [[ ! -d "$DTMGR_HOME/$TARGET" ]]; then
        TARGET="$COMMAND" log_error "invalid environment $TARGET"
        return 1
    fi
}

clean_this() {
    git clean -dffx . >/dev/null
}

link_file() {
    declare file="$1" dest="$2"

    if [[ -f "$dest" || -d "$dest" || -L "$dest" ]]; then
        # destination file exists, check if it's a link to $file
        [[ "$(readlink $dest)" == "$file" ]] && return
        
        # if the destination file exists but it isn't a link to $file, back it
        # up before linking
        [[ ${USE_SUDO:-0} -eq 1 ]] && sudo mv "$dest" "${dest}.old" || mv "$dest" "${dest}.old"
        log_warn "$dest file already exists, moved to ${dest}.old"
    fi
    
    # link the file to the destination
    [[ ${USE_SUDO:-0} -eq 1 ]] && sudo ln -sf "$file" "$dest" || ln -sf "$file" "$dest"
}

run_root_script()
{
    declare script_type="$1" log_file="$2"
    local root_script script_failed

    if [[ $(find . -name "$script_type-root*" | wc -l) -ge 1 ]]; then
        root_script="./${script_type}-root-$DISTRI"
        # use debian root script if we are on one of the following distros and no specific
        # script is available
        for distri in ubuntu parrot; do
            if [[ "$DISTRI" == "$distri" && ! -x "$root_script" && -x "./${script_type}-root-debian" ]]; then
                root_script="./${script_type}-root-debian"
                break
            fi
        done

        [[ ! -x "$root_script" ]] && return

        if [[ "$ALLOW_SUDO" -ne 1 ]]; then
            log_warn "sudo not allowed, you may need to run '$root_script' manually" \
                "or use the '-s' FLAG"
            return
        fi

        set +e
        if [[ "$VERBOSE_OUTPUT" -eq 1 ]]; then
            sudo env DISTRI=$DISTRI "$root_script" 2>&1 | tee -a "$log_file"
        else
            sudo env DISTRI=$DISTRI "$root_script" >> "$log_file" 2>&1
        fi
        script_failed=$?
        set -e

        if [[ "$script_failed" -eq 0 ]]; then
            log_info "root $script_type script completed with success"
        else
            # Move the logfile to a temporary location, the target directory will be cleaned
            tmp_file="$(log_temp_file "$log_file")"
            log_error "root $script_type script failed (log file moved to $tmp_file)"

            # clean before exiting
            clean_this
            exit 1
        fi
    fi
}

run_script()
{
    declare script="$1" log_file="$2"
    local script_failed

    [[ ! -x "./$script" ]] && return  # nothing to execute

    set +e
    if [[ "$VERBOSE_OUTPUT" -eq 1 ]]; then
        DISTRI=$DISTRI PATH="$DTMGR_HOME/bin/:$PATH" nice -n$NICE_LEVEL "./$script" 2>&1 | tee -a "$log_file"
    else
        DISTRI=$DISTRI PATH="$DTMGR_HOME/bin/:$PATH" nice -n$NICE_LEVEL "./$script" >> "$log_file" 2>&1
    fi
    script_failed=$?
    set -e

    if [[ "$script_failed" -eq 0 ]]; then
        log_info "$script script finished"
    else
        # Move the logfile to a temporary location, the target directory will be cleaned
        tmp_file="$(log_temp_file "$log_file")"
        log_error "$script script failed (log file moved to $tmp_file)"

        # clean before exiting
        clean_this
        exit 1
    fi
}

# ------------------------------------------------------------------------------
#   INSTALL COMMAND
# ------------------------------------------------------------------------------

cmd_install_usage() {
    cat <<EOF
usage: $(basename $0) [FLAGS] install [OPTIONS] [TOOL ...]

Install/reinstall the supplied tools. Upon successfull installation of a tool,
the binaries under the 'bin' subdirectory will be symlinked to the global 'bin'
directory where all tools are installed.

OPTIONS:
    -r      If the tool is already installed, reinstall it. The tool will be
            uninstalled first and then installed again.

Execute $(basename $0) with no arguments to see available flags.

EOF
}

cmd_install() {
    local OPTIND op op_r op_all

    while getopts ":r" op; do
        case "$op" in
            r) op_r=1 ;;
            *)
                TARGET="install" log_error "invalid option ($op)"; cmd_install_usage; exit 1 ;;
        esac
    done
    shift $((OPTIND-1))

    tools="$@"
    [[ -z "$tools" ]] && TARGET="install" log_fatal "a tool is required"

    for TARGET in $tools; do
        verify_target || continue

        if is_tool_installed "$PWD/$TARGET"; then
            # tool installed, if -r option was not supplied, continue
            if [[ "${op_r:-0}" -eq 0 ]]; then
                log_info "tool already installed, use -r to reinstall"
                continue
            fi

            $0 uninstall $TARGET
        fi

        cd $TARGET
        
        # the first line in all install scripts should have the -ex flags
        if [[ $(for i in install* uninstall*; do if [[ -e "$i" ]]; then head -1 "$i"; fi; done | \
            sort | uniq | grep -v '^#!/bin/bash -ex$' | wc -l) -ne 0 ]]
        then
            log_error "not all install/uninstall scripts start with #!/bin/bash -ex"
            cd ..
            continue
        fi

        log_info "starting install, logging to $PWD/install.log"

        # run root install script
        run_root_script "install" "install.log"

        # run install script
        run_script "install" "install.log"

        cd ..
        cmd_link -b "$TARGET"
    done
}

# ------------------------------------------------------------------------------
#   LINK COMMAND
# ------------------------------------------------------------------------------

cmd_link_usage() {
    cat <<EOF
usage: $(basename $0) [FLAGS] link [OPTIONS] [TARGET ...]

Link binaries and dotfiles for the supplied targets.

OPTIONS:
    -b          Link binaries (from 'bin' subdirectory)
    -s          Link files from the 'sym' directory, according to the 'links' file
    -m          Create parent directories
    -o          Link only files for the current host
    -h          Manually supply the hostname (insted of reading from /etc/hostname)

Execute $(basename $0) with no arguments to see available flags.

EOF
}

cmd_link() {
    local OPTIND op op_sym op_bin op_mkdir use_sudo op_host host

    while getopts ":sbmoh:" op; do
        case "$op" in
            s) op_sym=1 ;;
            b) op_bin=1 ;;
            m) op_mkdir=1 ;;
            o) op_host=1 ;;
            h) host="$OPTARG" ;;
            :)
                TARGET="link" log_error "option (-$OPTARG) expects one argument"; cmd_link_usage; exit 1 ;;
            *)
                TARGET="link" log_error "invalid option ($op)"; cmd_link_usage; exit 1 ;;
        esac
    done
    shift $((OPTIND-1))
    
    op_sym=${op_sym:-0}
    op_bin=${op_bin:-0}
    op_host=${op_host:-0}

    # if there is nothing to link, do nothing
    if [[ "$op_bin" -eq 0 && "$op_sym" -eq 0 ]]; then
        TARGET="link" log_error "nothing to link. specify, at least, one of these options: '-b' or '-s'"
        cmd_link_usage
        exit 1
    fi

    targets="$@"
    [[ -z "$targets" ]] && TARGET="link" log_fatal "a target is required"

    for TARGET in $targets; do
        verify_target || continue
        cd $TARGET
        
        if [[ "$op_bin" -eq 1 && -d "./bin" ]]; then
            # link binaries
            for b in $PWD/bin/*; do
                link_file "$b" "$OLDPWD/bin/$(basename $b)"
            done
            log_info "bin links updated"
        fi

        if [[ "$op_sym" -eq 1 && -f "./links" ]]; then
            # link files from the sym directory
            while read -r line; do
                host=${host:-"$(cut -d':' -f1 <<< $line | awk '{$1=$1};1')"}
                sym="$(cut -d':' -f2 <<< $line | awk '{$1=$1};1')"
                dest="$(cut -d':' -f3 <<< $line | awk '{$1=$1};1' | envsubst)"
                destdir="$(dirname "$dest")"

                # skip unwanted entries
                [[ "$op_host" -eq 1 && "$(cat /etc/hostname)" != "$host" ]] && continue
                [[ "$host" != "*" && "$(cat /etc/hostname)" != "$host" ]] && continue

                # create parent directories
                [[ "${op_mkdir:-0}" -eq 1 ]] && mkdir -p $(dirname $dest) 2>/dev/null || true
                
                if [[ ! -d "$destdir" ]]; then
                    log_error "missing parent directory ($destdir) consider using -m"
                    continue
                fi

                # check if we have write permission on the destination directory
                if [[ ! -w "$destdir" ]]; then
                    if [[ "$ALLOW_SUDO" -ne 1 ]]; then
                        log_error "operation not permitted, consider using the -s FLAG"
                        continue
                    fi

                    use_sudo=1
                fi

                USE_SUDO=${use_sudo:-0} link_file "$OLDPWD/sym/$sym" "$dest"
            done <<< "$(grep -vxE '^[[:blank:]]*(#.*)?$' ./links)"
            log_info "sym links updated"
        fi

        cd ..
    done
}

# ------------------------------------------------------------------------------
#   UNINSTALL COMMAND
# ------------------------------------------------------------------------------

cmd_uninstall_usage() {
    cat <<EOF
usage: $(basename $0) [FLAGS] uninstall [TOOL ...]

Uninstall the supplied tools.

Execute $(basename $0) with no arguments to see available FLAGS.

EOF
}

cmd_uninstall() {
    tools="$@"
    [[ -z "$tools" ]] && tools="$(cmd_list -i)"

    for TARGET in $tools; do
        verify_target || continue

        if ! is_tool_installed "$TARGET"; then
            log_warn "environment not installed"
            continue
        fi

        cd $TARGET

        log_info "starting uninstall, logging to $PWD/uninstall.log"
        
        # run root uninstall script
        run_root_script "uninstall" "uninstall.log"

        # run regular uninstall script
        run_script "uninstall" "uninstall.log"

        # remove symlinks from the bin directory
        if [[ -d "./bin" ]]; then
            for b in $PWD/bin/*; do
                candidate="$OLDPWD/bin/$(basename $b)"
                [[ "$(readlink $candidate)" == "$b" ]] && rm -f "$candidate"
            done
        fi

        # remove symlinks from the sym directory
        if [[ -f "./links" ]]; then
            while read -r line; do
                host="$(cut -d':' -f1 <<< $line | awk '{$1=$1};1')"
                sym="$(cut -d':' -f2 <<< $line | awk '{$1=$1};1')"
                dest="$(cut -d':' -f3 <<< $line | awk '{$1=$1};1' | envsubst)"

                # skip unwanted entries
                [[ "$host" != "*" && "$(cat /etc/hostname)" != "$host" ]] && continue

                [[ "$(readlink $dest)" == "$OLDPWD/sym/$sym" ]] && (rm -f "$dest" || \
                    log_warn "couldn't remove symlink '$dest'")
            done <<< "$(grep -vxE '^[[:blank:]]*(#.*)?$' ./links)"
        fi

        # clean the environment directory
        clean_this

        log_info "target uninstalled successfully"

        cd ..
    done
}

# ------------------------------------------------------------------------------
#   LIST COMMAND
# ------------------------------------------------------------------------------

cmd_list_usage() {
    cat <<EOF
usage: $(basename $0) [FLAGS] list [COMMAND OPTIONS]

List available targets.

OPTIONS:
    -s      List targets with a 'links' file
    -i      List installed tools
    -u      List uninstalled tools

Execute $(basename $0) with no arguments to see available flags.

EOF
}

cmd_list() {
    local OPTIND op op_in op_un op_sym

    while getopts ":siu" op; do
        case "$op" in
            s) op_sym=1 ;;
            i) op_in=1 ;;
            u) op_un=1 ;;
            *) TARGET="list" log_error "invalid option ($op)"; cmd_list_usage; exit 1 ;;
        esac
    done
    shift $((OPTIND-1))

    op_in=${op_in:-0}
    op_un=${op_un:-0}
    op_sym=${op_sym:-0}

    for t in *; do
        if [[ "$op_sym" -eq 1 && "$(find $t -type f -maxdepth 1 -name 'links' 2>/dev/null | wc -l)" -gt 0 ]]; then
            echo "$t"
        elif [[ "$(find $t -type f -maxdepth 1 -name 'install*' 2>/dev/null | wc -l)" -gt 0 ]]; then
            if is_tool_installed "$t"; then
                [[ "$op_in" -eq 1 ]] && echo "$t"
            else
                [[ "$op_un" -eq 1 ]] && echo "$t"
            fi
        fi
    done
}

# ------------------------------------------------------------------------------
#   MAIN ~ MANAGE SCRIPT
# ------------------------------------------------------------------------------

usage() {
    cat <<EOF
usage: $(basename $0) [FLAGS] COMMAND [COMMAND OPTIONS]

FLAGS:
    -s      Allow sudo operations (like executing root scripts)
    -v      Set verbose output
    -n      "nice" the executed script to reduce background load
    -h      Command specific help

COMMANDS:
    install     Install/reinstall the supplied tools
    link        Update bin symlinks and link dotfiles
    uninstall   Uninstall the supplied targets
    list        List available targets

EOF
}

[[ $# -eq 0 ]] && usage && exit
[[ -z ${DISTRI+x} ]] && DISTRI="$(detect_distribution)"

# parse the script flags
while getopts ":svnh" op; do
    case "$op" in
        s) export ALLOW_SUDO=1 ;;
        v) export VERBOSE_OUTPUT=1 ;;
        h) SHOW_HELP=1 ;;
        n) export NICE_LEVEL=10 ;;
        *) export TARGET="ERROR" log_error "invalid flag ($op)"; usage; exit 1
    esac
done
shift $((OPTIND-1))

[[ -z ${ALLOW_SUDO+x} ]] && export ALLOW_SUDO=0
[[ -z ${NICE_LEVEL+x} ]] && export NICE_LEVEL=0
[[ -z ${VERBOSE_OUTPUT+x} ]] && export VERBOSE_OUTPUT=0
SHOW_HELP=${SHOW_HELP:-0}

# parse the command
COMMAND="$1"; shift

if [[ -z "$COMMAND" ]]; then
    TARGET="ERROR" log_error "missing command"
    usage
    exit 1
fi

cd $DTMGR_HOME

case "$COMMAND" in
    install|link|uninstall|list)
        [[ "$SHOW_HELP" -eq 1 ]] && cmd_${COMMAND}_usage || cmd_${COMMAND} "$@" ;;
    *)
        TARGET="$COMMAND" log_error "invalid command '$COMMAND'"; usage; exit 1
esac
