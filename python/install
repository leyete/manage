#!/bin/bash -ex
#
# Installation script for Python
# https://www.python.org

set -eu -o pipefail

find_latest_version() {
    git ls-remote --tags git://github.com/python/cpython.git \
    | grep -v '\.[0-9]\{1,2\}\(a[0-9]\+\|b\|rc\)' \
    | grep -oh 'v[0-9]\{1,2\}\.[0-9]\{1,2\}\(\.[0-9]\{1,2\}\)\?' \
    | sort --version-sort -r \
    | head -n 1
}

install_latest_version() {
    version="$(find_latest_version)"
	git clone https://github.com/python/cpython.git

	cd cpython
	git checkout "$version"

	./configure --prefix="$OLDPWD/$version"
	make
	make install

	# make the bin and share directories available
	cd ..
	ln -sf "$PWD/$version/bin" .
	ln -sf "$PWD/$version/share" . 

	rm -rf cpython
}

set_environment() {
    env_files=(
        "$DTMGR_HOME/zsh/oh-my-zsh/custom/environment.zsh"  # for ZSH environment
    )

    for env_file in "${env_files[@]}"; do
        if [[ -d "$(dirname "$env_file")" ]]; then
            magic="# PYTHON: functions and aliases"
            [[ "$DISTRI" == "arch" ]] && venvwrapper_path="$HOME/.local/bin/" || venvwrapper_path="$PWD/bin"
            if ! grep "$magic" "$env_file" >/dev/null 2>&1; then
                cat >> "$env_file" << EOF

$magic
venvwrap() {
    export WORKON_HOME="$PWD/.virtualenvs"
    source $venvrapper_path/virtualenvwrapper.sh
}
EOF
            fi
        fi
    done
}

# install most recent Python version, since Arch Linux offers a pretty decent
# updated version through pacman, this is only required on other systems
[[ "$DISTRI" != "arch" ]] && install_latest_version

# install virtualenvwrapper
bin/python3 -m pip install virtualenvwrapper

# copy the scripts to the bin subdirectory
[[ ! -d "./bin" ]] && mkdir bin
for script in $PWD/.data/scripts/*; do
    ln -sf "$script" "$PWD/bin/$(basename $script)"
done

set_environment
